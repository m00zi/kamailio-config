#!KAMAILIO
#!define DBURL "mysql://kamailio:100%recycled@localhost/kamailio"
#!define SIP_TRACE 12
#!substdef "!MY_IP_ADDR!__IP_ADDRESS__!g"
#!substdef "!MY_DOMAIN!__DOMAIN_NAME__!g"

####### Global Parameters #########

debug=2
log_stderror=no
log_facility=LOG_LOCAL0
fork=yes
children=4
disable_tcp=yes
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"
listen=MY_IP_ADDR
listen=MY_DOMAIN
port=5060

####### Modules Section ########

loadmodule "db_mysql.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "jsonrpcs.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "permissions.so"
loadmodule "domain.so"
loadmodule "htable.so"
loadmodule "textopsx.so"
loadmodule "ctl.so"
loadmodule "siptrace.so"

# ----------------- setting module-specific parameters --------------- #

# ----- tm params ----- #
modparam("tm","failure_reply_mode",3)
modparam("tm","auto_inv_100_reason","Trying")

# ----- rr params ----- #
modparam("rr","append_fromtag",1)

# ----- permissions params ----- #
modparam("permissions","db_url",DBURL)
modparam("permissions","db_mode",1)

# ----- domain params ----- #
modparam("domain","db_url",DBURL)

# ----- htable params ----- #
modparam("htable","db_url",DBURL)
modparam("htable","htable","dids=>size=10;autoexpire=0;dbtable=did_routing;dbmode=0;cols='did,destination_domain'")

# ----- siptrace params ----- #
modparam("siptrace","trace_on",1)
modparam("siptrace","trace_flag",SIP_TRACE)
modparam("siptrace","trace_to_database",0)
modparam("siptrace","duplicate_uri","sip:__HOMER_IP__:9060")
modparam("siptrace","hep_capture_id",2079)
modparam("siptrace","hep_mode_on",1)
modparam("siptrace","trace_mode",0)

####### Routing Logic ########

request_route
{
	route(REQINIT);

	route(OPTIONS);

	xlog("L_INFO","SIP Request: SourceIP=$si:$sp;Method=$rm;From=$fu;To=$tu;Message=$mb");

	sip_trace();
	setflag(SIP_TRACE);

	if (is_method("CANCEL"))
	{
		if (t_check_trans())
		{
			route(RELAY);
		}

		exit;
	}

	# route messages within existing dialogs
	route(WITHINDLG);

	# handle retransmissions
	if (t_precheck_trans())
	{
		t_check_trans();
		exit;
	}

	t_check_trans();

	if ($rU==$null)
	{
		xlog("L_INFO","request_route: no user name in request URI...\n");

		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# route DIDs
	route(DID);

	# check for domain specific attributes
	route(DOMAIN);

	# route requests from trusted source domains
	route(SIPOUT);

	sl_send_reply("404","Not Found");
	exit;
}

route[RELAY]
{
	record_route();

	if (!t_relay())
	{
		xlog("L_INFO","route(RELAY): message relay failed!\n");
		sl_reply_error();
	}

	exit;
}

route[REQINIT]
{
	if ($ua =~ "friendly-scanner|VaxSIPUserAgent|sipcli|sipsak|SIPp|hamdan")
	{
		append_to_reply("Reason: Q.850;cause=21;text=\"call rejected\"\r\n");
		sl_send_reply("403","Forbidden");
		exit;
	}

	if (is_method("REGISTER|SUBSCRIBE"))
	{
		sl_send_reply("501","Not Implemented");
		exit;
	}

	if (!mf_process_maxfwd_header("10"))
	{
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (!sanity_check("1511","7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}

	if (!allow_source_address())
	{
		append_to_reply("Reason: Q.850;cause=21;text=\"call rejected\"\r\n");
		sl_send_reply("403","Forbidden");
		exit;
	}
}

route[OPTIONS]
{
	# is this an OPTIONS request ???
	# OR a keep-alive NOTIFY (the Cisco phones send a NOTIFY instead of OPTIONS)
	if (is_method("OPTIONS") || (is_method("NOTIFY") && is_present_hf("Event") && $hdr(Event)=="keep-alive"))
	{
		if (uri==myself)
		{
			sl_send_reply("200","OK");
			exit;
		}

		route(RELAY);
		exit;
	}
}

route[DID]
{
	if (uri!=myself) return;

	if (!is_method("INVITE")) return;

	xlog("L_INFO","route[DID]: RequestURIUser=$rU\n");

	$var(did)=$rU;

	if (is_uri_user_e164("$ru"))
	{
		xlog("L_INFO","route[DID]: E.164=TRUE\n");
		$var(did)=$(rU{re.subst,/^\+?[1-9]([0-9]{1,14})$/\1/});
		xlog("L_INFO","route[DID]: stripped_did=$var(did)\n");
	}

	$vn(domain)=$sht(dids=>$var(did));

	if ($vn(domain)!=$null)
	{
		xlog("L_INFO","route[DID]: match found.\n");

		xlog("L_INFO","route[DID]: domain=$vn(domain)\n");

		if ($vn(domain)=~":")
		{
			xlog("L_INFO","route[DID]: domain contains ':'\n");
			$vn(port)=$(vn(domain){re.subst,/^(.*):([0-9]{1,5})$/\2/});
			xlog("L_INFO","route[DID]: port=$vn(port)\n");
			if ($vn(port)!=$null)
			{
				$vn(domain)=$(vn(domain){re.subst,/^(.*):([0-9]{1,5})$/\1/});
				xlog("L_INFO","route[DID]: domain=$vn(domain)\n");
				$rp=$vn(port);
				$tp=$vn(port);
			}
		}

		$rU=$var(did);
		$rd=$vn(domain);
		$tU=$var(did);
		$td=$vn(domain);

		msg_apply_changes();

		xlog("L_INFO","route[DID]: RequestURI=$ru\n");
		xlog("L_INFO","route[DID]: ToURI=$tu\n");

		route(RELAY);
		exit;
	}
}

route[DOMAIN]
{
	xlog("L_INFO","route[DOMAIN]: look up domain specific attributes by the From URI domain...\n");

	xlog("L_INFO","route[DOMAIN]: FromDomain=$fd\n");

	$var(domain_found)=lookup_domain("$fd");

	xlog("L_INFO","route[DOMAIN]: domain_found=$var(domain_found)\n");

	if ($var(domain_found)<=0)
	{
		xlog("L_INFO","route[DOMAIN]: look up domain specific attributes by the source ip...\n");

		xlog("L_INFO","route[DOMAIN]: SourceIP=$si\n");

		$var(domain_found)=lookup_domain("$si");

		xlog("L_INFO","route[DOMAIN]: domain_found=$var(domain_found)\n");
	}

	if ($var(domain_found))
	{
		xlog("L_INFO","route[DOMAIN]: domain match found!\n");

		if (uri==myself && $avp(default_destination_host)!=$null)
		{
			xlog("L_INFO","route[DOMAIN]: overwrite default destination host...\n");
			$rd=$avp(default_destination_host);

			if ($avp(default_destination_port)!=$null)
			{
				xlog("L_INFO","route[DOMAIN]: overwrite default destination port...\n");
				$rp=$avp(default_destination_port);
			}

			xlog("L_INFO","route[DOMAIN]: RequestDomain=$rd;RequestPort=$rp;\n");
		}
	}
}

route[SIPOUT]
{
	if (uri==myself) return;

	loose_route();

	route(RELAY);
	exit;
}

route[WITHINDLG]
{
	if (!has_totag()) return;

	if (loose_route())
	{
		route(RELAY);
		exit;
	}

	if (is_method("ACK"))
	{
		if (t_check_trans())
		{
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		}
		else
		{
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not Found");
	exit;
}